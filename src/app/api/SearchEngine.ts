import { ChatOpenAI } from "@langchain/openai";
import { TavilyClient } from "tavily";
import { ChatGoogleGenerativeAI } from "@langchain/google-genai";
import { BaseChatModel } from "@langchain/core/language_models/chat_models";
import { SearchResultItem } from "../../types";

export class SearchEngine {
  private tavilyClient: TavilyClient;
  private llmModel: BaseChatModel;

  constructor() {
    // Initialize Tavily client
    this.tavilyClient = new TavilyClient({
      apiKey: process.env.TAVILY_API_KEY as string,
    });

    // Determine which model to use based on environment variable
    const modelType = process.env.AI_MODEL?.toLowerCase() || 'openai';
    
    // Initialize the selected LLM model
    if (modelType === 'gemini') {
      this.llmModel = new ChatGoogleGenerativeAI({
        modelName: "gemini-2.0-flash",
        temperature: 0.5,
        apiKey: process.env.GOOGLE_API_KEY as string,
      });
    } else {
      // Default to OpenAI
      this.llmModel = new ChatOpenAI({
        modelName: "gpt-4o",
        temperature: 0.5,
        openAIApiKey: process.env.OPENAI_API_KEY as string,
      });
    }
  }

  async search(query: string, includeDomains?: string[]): Promise<{ answer: string; sources: SearchResultItem[] }> {
    try {
      // Create search parameters
      const searchParams: {
        query: string;
        max_results: number;
        search_depth: "basic" | "advanced";
        include_answer: boolean;
        include_domains?: string[];
      } = {
        query: query,
        max_results: 5,
        search_depth: "basic" as "basic" | "advanced",
        include_answer: false,
      };
      
      // Only add include_domains if it exists and has values
      if (includeDomains && includeDomains.length > 0) {
        searchParams.include_domains = includeDomains;
      }
      
      console.log("üîç Search query sent to Tavily:", query);
      console.log("üîç Tavily search parameters:", searchParams);
      
      // Search with Tavily API
      const searchResults = await this.tavilyClient.search(searchParams);

      console.log("üìä Full Tavily response:", JSON.stringify(searchResults, null, 2));
      
      // Extract sources
      const sources = searchResults.results as SearchResultItem[];
      
      console.log(`üìë Number of sources extracted: ${sources.length}`);
      console.log("üìë Source titles:");
      sources.forEach((source, i) => {
        console.log(`  ${i+1}. ${source.title} (Score: ${source.score})`);
      });

      // Generate a concise answer in Romanian with basic Markdown formatting
      const prompt = `
        Bazat pe urmƒÉtoarele rezultate de cƒÉutare despre "${query}":
        
        ${sources.map((source, index) => 
          `[${index + 1}] ${source.title}
           URL: ${source.url}
           Con»õinut: ${source.content}
          `
        ).join('\n\n')}
        
        FormuleazƒÉ un rƒÉspuns concis »ôi informativ √Æn limba rom√¢nƒÉ. 
        RƒÉspunsul ar trebui sƒÉ sintetizeze informa»õiile relevante din rezultatele cƒÉutƒÉrii.
        DacƒÉ rezultatele nu oferƒÉ informa»õii suficiente, men»õioneazƒÉ acest lucru.
        
        Folose»ôte formatare Markdown de bazƒÉ pentru a structura rƒÉspunsul:
        1. Folose»ôte "# " pentru titluri principale
        2. Folose»ôte "## " pentru subtitluri
        3. Folose»ôte "### " pentru titluri de nivel 3
        4. Folose»ôte "- " sau "* " pentru liste cu puncte
        5. Folose»ôte "1. ", "2. " etc. pentru liste numerotate
        6. Folose»ôte "**text**" pentru text bold
        7. Folose»ôte "*text*" pentru text italic
        8. Folose»ôte "> text" pentru citate
        
        StructureazƒÉ rƒÉspunsul √Æn mod clar, folosind titluri pentru sec»õiuni importante »ôi liste pentru enumerƒÉri.
        AsigurƒÉ-te cƒÉ rƒÉspunsul este bine organizat »ôi u»ôor de citit.
        
        Exemple de formatare Markdown corectƒÉ:
        
        # Titlu principal
        
        Acesta este un paragraf cu **text bold** »ôi *text italic*.
        
        ## Subtitlu
        
        - Punct 1 √Æn listƒÉ
        - Punct 2 √Æn listƒÉ cu **text important**
        
        1. Primul element numerotat
        2. Al doilea element numerotat
        
        > Acesta este un citat
      `;

      const response = await this.llmModel.invoke(prompt);
      
      return {
        answer: response.content.toString(),
        sources,
      };
    } catch (error) {
      console.error("‚ùå Error in search:", error);
      throw new Error("A apƒÉrut o eroare √Æn timpul cƒÉutƒÉrii.");
    }
  }
}
